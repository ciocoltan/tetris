const main=document.querySelector(".main"),scroeElem=document.getElementById("score"),levelElem=document.getElementById("level"),nextTetroElem=document.getElementById("next-tetro"),pauseBtn=document.getElementById("pause"),gameOver=document.getElementById("game-over"),arrowUp=document.getElementById("arrow-up"),arrowLeft=document.getElementById("arrow-left"),arrowDown=document.getElementById("arrow-down"),arrowRight=document.getElementById("arrow-right"),spaceBtn=document.getElementById("space"),col=10,row=20,possibleLevels={1:{scorePerLine:10,speed:400,nextLevelScore:100},2:{scorePerLine:15,speed:300,nextLevelScore:500},3:{scorePerLine:20,speed:200,nextLevelScore:1e3},4:{scorePerLine:30,speed:100,nextLevelScore:2e3},5:{scorePerLine:50,speed:50,nextLevelScore:1/0}},figures={O:[[1,1],[1,1]],I:[[0,0,0,0],[1,1,1,1],[0,0,0,0],[0,0,0,0]],S:[[0,1,1],[1,1,0],[0,0,0]],Z:[[1,1,0],[0,1,1],[0,0,0]],L:[[1,0,0],[1,1,1],[0,0,0]],J:[[0,0,1],[1,1,1],[0,0,0]],T:[[1,1,1],[0,1,0],[0,0,0]]};let score=0,gameTimerID,currentLevel=1,isPaused=!0,playfield=[];for(let i=0;i<20;i++)playfield.push(Array(10).fill(0));let activeTetro=getNewTetro(),nextTetro=getNewTetro();function getNewTetro(){const possibleFigures="IOLJTSZ",rand=Math.floor(7*Math.random()),newTetro=figures["IOLJTSZ"[rand]];return{x:Math.floor((10-newTetro[0].length)/2),y:0,shape:newTetro}}function draw(){let mainInnerHTML="";for(let y=0;y<playfield.length;y++)for(let x=0;x<playfield[y].length;x++)1===playfield[y][x]?mainInnerHTML+='<div class="cell movingCell"></div>':2===playfield[y][x]?mainInnerHTML+='<div class="cell fixedCell"></div>':mainInnerHTML+='<div class="cell"></div>';main.innerHTML=mainInnerHTML}function startGame(){moveTetroDown(),isPaused||(updateGameState(),gameTimerID=setTimeout(startGame,possibleLevels[currentLevel].speed))}function moveTetroDown(){activeTetro.y+=1,hasCollisions()&&(activeTetro.y-=1,fixTetro(),removeFullLines(),activeTetro=nextTetro,nextTetro=getNewTetro(),drawNextTetro(),hasCollisions()&&reset())}function updateGameState(){addActiveTetro(),draw()}function hasCollisions(){for(let y=0;y<activeTetro.shape.length;y++)for(let x=0;x<activeTetro.shape[y].length;x++)if(activeTetro.shape[y][x]&&(void 0===playfield[activeTetro.y+y]||void 0===playfield[activeTetro.y+y][activeTetro.x+x]||2===playfield[activeTetro.y+y][activeTetro.x+x]))return!0;return!1}function drawNextTetro(){let nextTetroInnerHTML="";for(let y=0;y<nextTetro.shape.length;y++){for(let x=0;x<nextTetro.shape[y].length;x++)nextTetro.shape[y][x]?nextTetroInnerHTML+='<div class="cell movingCell"></div>':nextTetroInnerHTML+='<div class="cell"></div>';nextTetroInnerHTML+="<br/>"}nextTetroElem.innerHTML=nextTetroInnerHTML}function removePrevActiveTetro(){for(let y=0;y<playfield.length;y++)for(let x=0;x<playfield[y].length;x++)1===playfield[y][x]&&(playfield[y][x]=0)}function addActiveTetro(){removePrevActiveTetro();for(let y=0;y<activeTetro.shape.length;y++)for(let x=0;x<activeTetro.shape[y].length;x++)1===activeTetro.shape[y][x]&&(playfield[activeTetro.y+y][activeTetro.x+x]=activeTetro.shape[y][x])}function rotateTetro(){const prevTetroState=activeTetro.shape;activeTetro.shape=activeTetro.shape[0].map((val,index)=>activeTetro.shape.map(row=>row[index]).reverse()),hasCollisions()&&(activeTetro.shape=prevTetroState)}function removeFullLines(){let canRemoveLine=!0,filledLines=0;for(let y=0;y<playfield.length;y++){for(let x=0;x<playfield[y].length;x++)if(2!==playfield[y][x]){canRemoveLine=!1;break}canRemoveLine&&(playfield.splice(y,1),playfield.splice(0,0,Array(10).fill(0)),filledLines+=1),canRemoveLine=!0}switch(filledLines){case 1:score+=possibleLevels[currentLevel].scorePerLine,scroeElem.innerHTML=score;break;case 2:score+=3*possibleLevels[currentLevel].scorePerLine,scroeElem.innerHTML=score;break;case 3:score+=6*possibleLevels[currentLevel].scorePerLine,scroeElem.innerHTML=score;break;case 4:score+=12*possibleLevels[currentLevel].scorePerLine,scroeElem.innerHTML=score}score>=possibleLevels[currentLevel].nextLevelScore&&(currentLevel++,levelElem.innerHTML=currentLevel)}function getNewTetro(){const possibleFigures="IOLJTSZ",rand=Math.floor(7*Math.random()),newTetro=figures["IOLJTSZ"[rand]];return{x:Math.floor((10-newTetro[0].length)/2),y:0,shape:newTetro}}function fixTetro(){for(let y=activeTetro.y;y<playfield.length;y++)for(let x=activeTetro.x;x<activeTetro.x+activeTetro.shape.length;x++)1===playfield[y][x]&&(playfield[y][x]=2)}function dropTetro(){for(let y=activeTetro.y;y<playfield.length;y++)if(activeTetro.y+=1,hasCollisions()){activeTetro.y-=1;break}}function reset(){pauseBtn.innerText="Start",isPaused=!0,clearTimeout(gameTimerID),score=0,currentLevel=1,playfield=[];for(let i=0;i<20;i++)playfield.push(Array(10).fill(0));gameOver.style.display="block"}draw(),arrowUp.addEventListener("click",()=>{isPaused||(rotateTetro(),updateGameState())},!1),arrowDown.addEventListener("click",()=>{isPaused||(moveTetroDown(),updateGameState())},!1),arrowRight.addEventListener("click",()=>{isPaused||(activeTetro.x+=1,hasCollisions()&&(activeTetro.x-=1),updateGameState())},!1),arrowLeft.addEventListener("click",()=>{isPaused||(activeTetro.x-=1,hasCollisions()&&(activeTetro.x+=1),updateGameState())},!1),spaceBtn.addEventListener("click",()=>{isPaused||(dropTetro(),updateGameState())},!1),pauseBtn.addEventListener("click",e=>{"Start"===e.target.innerHTML?(pauseBtn.blur(),drawNextTetro(),e.target.innerHTML="Pause",scroeElem.innerHTML=score,levelElem.innerHTML=currentLevel,gameTimerID=setTimeout(startGame,possibleLevels[currentLevel].speed),gameOver.style.display="none"):(e.target.innerHTML="Start",clearTimeout(gameTimerID)),isPaused=!isPaused},!1),document.addEventListener("keydown",e=>{isPaused||(37===e.keyCode?(activeTetro.x-=1,hasCollisions()&&(activeTetro.x+=1)):39===e.keyCode?(activeTetro.x+=1,hasCollisions()&&(activeTetro.x-=1)):40===e.keyCode?moveTetroDown():38===e.keyCode?(e.preventDefault(),e.stopPropagation(),rotateTetro()):32===e.keyCode&&(e.preventDefault(),e.stopPropagation(),dropTetro()),updateGameState())},!1);